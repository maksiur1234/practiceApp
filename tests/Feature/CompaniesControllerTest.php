<?php
namespace Tests\Feature;

use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\Models\Company;
use App\Models\Type;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;

class CompaniesControllerTest extends TestCase
{
    use RefreshDatabase;
    use withFaker;
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed();
    }

    public function testShow()
    {
        // Przygotowanie danych dla testu
        $company = Company::factory()->create(); // Stworzenie przykładowej firmy

        // Wykonanie żądania GET na endpoint '/companies/{company}' z podanym identyfikatorem firmy
        $response = $this->getJson("/companies/{$company->id}");

        // Sprawdzenie statusu odpowiedzi
        $response->assertStatus(200);

        // Sprawdzenie, czy odpowiedź JSON zawiera oczekiwane dane firmy
        $response->assertJson([
        'company' => [
        'id' => $company->id,
        'companyName' => $company->companyName,
        'email' => $company->email,
        ],
        ]);
    }

    public function testStore()
    {
        // Przygotowanie danych dla żądania POST
        $data = [
            'companyName' => 'Test Company',
            'email' => 'test@example.com',
            'password' => 'password123', // Hasło z co najmniej 8 znakami
            'type_id' => 999, // Nieprawidłowy identyfikator typu
        ];

        // Wykonanie żądania POST na endpoint '/companies' z danymi firmy
        $response = $this->postJson('/companies', $data);

        // Sprawdzenie statusu odpowiedzi
        $response->assertStatus(422);

        // Sprawdzenie, czy odpowiedź JSON zawiera oczekiwane dane błędu hasła i typu
        $response->assertJson([
            'message' => 'The selected type id is invalid.',
            'errors' => [
                'type_id' => [
                    'The selected type id is invalid.'
                ]
            ]
        ]);
    }

    public function testCreate()
    {
        // Wykonanie żądania GET na endpoint '/create-company'
        $response = $this->get('/create-company');

        // Sprawdzenie statusu odpowiedzi
        $response->assertStatus(200);

        // Sprawdzenie, czy odpowiedź JSON zawiera oczekiwane dane typów firm
        $response->assertJsonStructure([
            'types'
        ]);

        // Sprawdzenie, czy odpowiedź JSON zawiera prawidłową liczbę typów firm
        $response->assertJsonCount(Type::count(), 'types');
    }

    public function testIndex()
    {
        $type = Type::first();
        $company = Company::factory()->create([
            'user_id' => User::factory()->create()->id,
            'type_id' => $type->id,
        ]);

        $this->json('get', '/api/companies?type_id='.$type->id)
            ->assertOk()
            ->assertJsonCount(1)
            ->assertJsonFragment([
                'id' => $company->id,
                'name' => $company->name,
                'email' => $company->email,
                'type_id' => $company->type_id,
            ]);
    }
    public function testIndex_onlySpecificCompany()
    {
        $musicType = Type::query()->where('slug', 'music')->first();
        $foodType = Type::query()->where('slug', 'food')->first();

        $musicCompany = Company::factory()->create([
            'user_id' => User::factory()->create()->id,
            'type_id' => $musicType->id,
        ]);

        $foodCompany = Company::factory()->create([
            'user_id' => User::factory()->create()->id,
            'type_id' => $foodType->id,
        ]);

        $this->json('get', '/api/companies?type_id='.$musicType->id)
            ->assertOk()
            ->assertJsonCount(1)
            ->assertJsonFragment([
                'id' => $musicCompany->id,
                'name' => $musicCompany->name,
                'email' => $musicCompany->email,
                'type_id' => $musicCompany->type_id,
            ])
            ->assertJsonMissing([
                'id' => $foodCompany->id,
                'name' => $foodCompany->name,
                'email' => $foodCompany->email,
                'type_id' => $foodCompany->type_id,
            ]);
    }
    public function testIndex_onlySpecificCompany2()
    {
        $types = Type::all();

        $musicCompany = Company::factory()->create([
            'user_id' => User::factory()->create()->id,
            'type_id' => $types->where('slug', 'music')->first()->id,
        ]);

        $foodTypeId = $types->where('slug', 'food')->first()->id;
        $foodCompany = Company::factory()->create([
            'user_id' => User::factory()->create()->id,
            'type_id' => $foodTypeId,
        ]);

        $this->json('get', '/api/companies?type_id='.$foodTypeId)
            ->assertOk()
            ->assertJsonCount(1)
            ->assertJsonFragment([
                'id' => $foodCompany->id,
                'name' => $foodCompany->name,
                'email' => $foodCompany->email,
                'type_id' => $foodCompany->type_id,
            ])
            ->assertJsonMissing([
                'id' => $musicCompany->id,
                'name' => $musicCompany->name,
                'email' => $musicCompany->email,
                'type_id' => $musicCompany->type_id,
            ]);
    }
    public function testIndex_noCompany()
    {
        $type = Type::first();

        $this->json('get', '/api/companies?type_id='.$type->id)
            ->assertOk()
            ->assertJsonCount(0);
    }
    public function testIndex_notExistingTypeId()
    {
        $this->json('get', '/api/companies?type_id=1')
            ->assertNotFound();
    }

}
